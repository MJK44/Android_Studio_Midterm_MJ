package com.example.mariejosekhalil_pet_adoption.views

import android.content.Intent
import android.net.Uri
import android.os.Bundle
import android.widget.RadioButton
import android.widget.Toast
import androidx.appcompat.app.AppCompatActivity
import androidx.lifecycle.ViewModelProvider
import androidx.lifecycle.lifecycleScope
import androidx.recyclerview.widget.LinearLayoutManager
import com.example.mariejosekhalil_pet_adoption.R
import com.example.mariejosekhalil_pet_adoption.adapter.BreedAdapter
import com.example.mariejosekhalil_pet_adoption.databinding.ActivityAddPetBinding
import com.example.mariejosekhalil_pet_adoption.model.Pet
import com.example.mariejosekhalil_pet_adoption.viewmodel.PetViewModel
import com.google.firebase.firestore.FirebaseFirestore
import com.google.firebase.storage.FirebaseStorage
import kotlinx.coroutines.flow.collectLatest
import java.util.UUID

class AddPetActivity : AppCompatActivity() {

    private lateinit var binding: ActivityAddPetBinding
    private lateinit var petViewModel: PetViewModel
    private var imageUrl: String = "" // Variable to store the selected image URL

    companion object {
        const val IMAGE_PICK_CODE = 1000
    }

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        binding = ActivityAddPetBinding.inflate(layoutInflater)
        setContentView(binding.root)

        // Initialize PetViewModel
        petViewModel = ViewModelProvider(this).get(PetViewModel::class.java)

        // Observe operation status for feedback
        petViewModel.operationStatus.observe(this) { status ->
            Toast.makeText(this, status, Toast.LENGTH_SHORT).show()
        }

        // Set up RecyclerView LayoutManager
        binding.sfRecyclerview.layoutManager = LinearLayoutManager(this)

        // Set up click listeners for animal images
        binding.imgDog.setOnClickListener {
            fetchBreeds("dogs") { breeds ->
                updateBreedRecyclerView(breeds)
            }
        }

        binding.imgCat.setOnClickListener {
            fetchBreeds("cats") { breeds ->
                updateBreedRecyclerView(breeds)
            }
        }

        // Set up the Submit button listener
        binding.sfBtnSubmit.setOnClickListener {
            handleAddPet()
        }

        // Set up the ImageView click listener to pick an image
        binding.imageView.setOnClickListener {
            pickImage()
        }
    }


    private fun fetchBreeds(animalType: String, callback: (List<String>) -> Unit) {
        val db = FirebaseFirestore.getInstance()
        db.collection("animals").document(animalType)
            .get()
            .addOnSuccessListener { document ->
                if (document != null && document.exists()) {
                    val breeds = document.get("breeds") as? List<String> ?: emptyList()
                    callback(breeds)
                } else {
                    callback(emptyList())
                }
            }
            .addOnFailureListener { exception ->
                Toast.makeText(this, "Error fetching breeds: ${exception.message}", Toast.LENGTH_SHORT).show()
                callback(emptyList())
            }
    }

    private fun updateBreedRecyclerView(breeds: List<String>) {
        val adapter = BreedAdapter(breeds) { selectedBreed ->
            Toast.makeText(this, "Selected: $selectedBreed", Toast.LENGTH_SHORT).show()
            // Save the selected breed or use it as needed
        }
        binding.sfRecyclerview.adapter = adapter
    }

    private fun handleAddPet() {
        // Collect data from input fields
        val petName = binding.sfEtName.text.toString().trim()
        val petBreed = binding.radioGroup.checkedRadioButtonId.let { id ->
            if (id != -1) findViewById<RadioButton>(id).text.toString() else null
        }
        val petCity = binding.sfEtCity.text.toString().trim()
        val petDistrict = binding.sfEtDistrict.text.toString().trim()
        val petExplanation = binding.sfEtExplanation.text.toString().trim()

        // Validate inputs
        if (petName.isEmpty() || petBreed.isNullOrEmpty() || petCity.isEmpty() || petDistrict.isEmpty() || petExplanation.isEmpty() || imageUrl.isEmpty()) {
            Toast.makeText(this, "Please fill in all fields and select an image", Toast.LENGTH_SHORT).show()
            return
        }

        // Create a Pet object to store in the database
        val newPet = Pet(
            name = petName,
            breed = petBreed,
            age = "Unknown", // Optional field, default value
            location = "$petCity, $petDistrict",
            description = petExplanation,
            imageUrl = imageUrl,
            id = 0, // Auto-generated by Room
            userId = "defaultUserId" // Replace with actual user ID during integration
        )

        // Save the pet to the database using PetViewModel
        petViewModel.addPet(newPet)
        Toast.makeText(this, "Pet added successfully", Toast.LENGTH_SHORT).show()
        saveToFirebase(newPet)

        // Navigate back to MainActivity
      /*  val intent = Intent(this, MainActivity::class.java)
        intent.flags = Intent.FLAG_ACTIVITY_CLEAR_TOP or Intent.FLAG_ACTIVITY_NEW_TASK
        startActivity(intent)
        finish()*/

    }
    private fun saveToFirebase(pet: Pet) {
        val db = FirebaseFirestore.getInstance()
        val petData = hashMapOf(
            "name" to pet.name,
            "breed" to pet.breed,
            "age" to pet.age,
            "location" to pet.location,
            "description" to pet.description,
            "imageUrl" to pet.imageUrl,
            "userId" to pet.userId
        )

        db.collection("pets")
            .add(petData)
            .addOnSuccessListener {
                Toast.makeText(this, "Pet saved to Firebase", Toast.LENGTH_SHORT).show()
            }
            .addOnFailureListener { e ->
                Toast.makeText(this, "Error saving pet to Firebase: ${e.message}", Toast.LENGTH_SHORT).show()
            }
    }
    private fun uploadImageToFirebase(imageUri: Uri, pet: Pet) {
        val storageRef = FirebaseStorage.getInstance().reference.child("pets/${UUID.randomUUID()}")
        storageRef.putFile(imageUri)
            .addOnSuccessListener {
                storageRef.downloadUrl.addOnSuccessListener { uri ->
                    pet.imageUrl = uri.toString()
                    saveToFirebase(pet) // Save the pet after uploading the image
                }
            }
            .addOnFailureListener { e ->
                Toast.makeText(this, "Error uploading image: ${e.message}", Toast.LENGTH_SHORT).show()
            }
    }


    private fun clearInputs() {
        binding.sfEtName.text.clear()
        binding.sfEtCity.text.clear()
        binding.sfEtDistrict.text.clear()
        binding.sfEtExplanation.text.clear()
        binding.radioGroup.clearCheck()
        binding.imageView.setImageResource(R.color.transparent) // Clear the image
        imageUrl = ""
    }

    // Function to pick an image from the gallery
    private fun pickImage() {
        val intent = Intent(Intent.ACTION_PICK)
        intent.type = "image/*"
        startActivityForResult(intent, IMAGE_PICK_CODE)
    }

    // Handle the result of the image picker
    override fun onActivityResult(requestCode: Int, resultCode: Int, data: Intent?) {
        super.onActivityResult(requestCode, resultCode, data)
        if (requestCode == IMAGE_PICK_CODE && resultCode == RESULT_OK) {
            val imageUri = data?.data
            binding.imageView.setImageURI(imageUri)
            imageUrl = imageUri.toString() // Save the URI for storage
        }
    }

}
